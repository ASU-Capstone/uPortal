#
# Modify this file to suit your environment.
# The values of these properties will
# override the values of properties of the
# same name in the build.xml file.
#
# See build.xml for versions and descriptions
# of each of the required JAR files.
#
# Use forward slashes for path names even if
# you are in a Windows environment!
#


#==================== File and Directory Names ========================

app.name=uPortal
app.version=2.6.1

lib.path=lib
# path to tomcat binaries
server.home=/local/software/apache-tomcat-5.5.23
# path to tomcat servlet container (defaults to same directory as the tomcat binaries)
server.base=${server.home}

webapp.docBase=uPortal
webapp.path=/${webapp.docBase}

# With Tomcat (at least) you can make uPortal the default application by setting webapp.docBase to ROOT
# and webapp.path to nothing
# (and removing the webapps/ROOT directory that came with the Tomcat distribution)
#webapp.docBase=ROOT
#webapp.path=

deploy.home=${server.base}/webapps/${webapp.docBase}

# the name of the prototype context file for Tomcat
# webapp.contextFile=uPortal.xml

# prototype context file for use with Tomcat 5.5
#
# Note that if you use this context file to declare one or more DataSources you would like
# the Tomcat 5.5 servlet container to instantiate and make available to uPortal via JNDI,
# you also need to make the .jar files implementing those datasources available to
# Tomcat 5.5 by installing them into the /common/lib directory of your Tomcat 5.5 instance.
# Without the required .jar(s), Tomcat will be unable to instantiate the DataSource.
#
# The build.xml build process will install whatever .jars you place into the /lib/container-common
# directory into Tomcat's /common/lib directory.  If you place your database driver .jar into /lib/container-common,
# then the 'deploy' target in the Ant build will install that .jar into 
# into Tomcat 5.5 /common/lib.  Alternatively, you can of course install your database driver jar manually.
#
webapp.contextFile=uPortal55.xml

#==================== Compilation Control Options =====================

compile.debug=true
compile.deprecation=false
compile.optimize=true

#==================== Automated tests output configuration ============

#Uncomment property "tests.xmlFormat=true" to instruct the runtests Ant target 
#to produce XML-formatted test run reports into ${dist.home}/testresults

#tests.xmlFormat=true

#==================== External Dependencies ===========================

# The build process "discovers" dependencies in certain "magic" directories.
# The default locations and contents of these directories and how the buiild process treats them 
# are documented in /docs/depdencies .

# Optionally, you can declare the locations of these directories, allowing you to override their default locations.
# None of the following properties are actually necessary.  build.xml provides out-of-the-box-working defaults.

#lib.compile=./lib/compile
#lib.container-common=./lib/container-common
#lib.container-common-endorsed=./lib/container-common-endorsed
#lib.container-shared=./lib/container-shared
#lib.portlets=./lib/portlets
#lib.provided=./lib/provided
#lib.runtime=./lib/runtime
#lib.test=./lib/test
