<with-attribute key="Attributes.NODE" value="${newDoc(structures)}">
    <echo-ln>Export Layout:  USER_NAME=${USER_NAME}</echo-ln>
    <append-node>
        <username>${USER_NAME}</username>
    </append-node>
    <with-attribute key="USER_ID" value="${sql(SELECT user_id FROM up_user WHERE user_name = '${USER_NAME}')}">
        <choose>
            <when test="${isNull(${USER_ID})}">
                <echo-ln>WARNING:  User '${USER_NAME}' does not exist;  no layout file will be generated.</echo-ln>
                <log level="warn">User '${USER_NAME}' does not exist;  no layout file will be generated.</log>
            </when>
            <otherwise>
                <sql-query>
                    <sql>SELECT * FROM up_layout_struct WHERE user_id = ? AND layout_id = 1 AND chan_id IS NULL</sql>
                    <parameter value="${USER_ID}"/>
                    <subtasks>
                        <append-node>
                            <folder
                                struct-id="${STRUCT_ID}"
                                name="${NAME}"
                                next-struct-id="${NEXT_STRUCT_ID}"
                                child-struct-id="${CHLD_STRUCT_ID}"
                                type="${org.jasig.portal.io.FolderTypePhrase(${TYPE})}"
                                hidden="${org.jasig.portal.io.FlagYorNPhrase(${req(HIDDEN)})}"
                                immutable="${org.jasig.portal.io.FlagYorNPhrase(${req(IMMUTABLE)})}"
                                unremovable="${org.jasig.portal.io.FlagYorNPhrase(${req(UNREMOVABLE)})}"/>
                        </append-node>
                    </subtasks>
                </sql-query>
                <sql-query>
                    <sql>SELECT chan_id, struct_id, next_struct_id FROM up_layout_struct WHERE user_id = ? AND layout_id = 1</sql>
                    <parameter value="${USER_ID}"/>
                    <subtasks>
                        <with-attribute key="CHAN_FNAME" value="${sql(SELECT chan_fname FROM up_channel WHERE chan_id = ${CHAN_ID})}">
                            <if test="${groovy(CHAN_FNAME == null)}">
                                <log level="warn">User ${USER_NAME}'s layout references a missing channel;  The layout document will be exported, but removing the empty reference (manually) is recommended.</log>
                            </if>
                            <append-node>
                                <channel
                                    fname="${CHAN_FNAME}"
                                    struct-id="${STRUCT_ID}"
                                    next-struct-id="${NEXT_STRUCT_ID}"/>
                            </append-node>
                        </with-attribute>
                    </subtasks>
                </sql-query>
                <!-- Layout Parameters. -->
                <sql-query>
                    <sql>
                        SELECT uplp.struct_id, uplp.struct_parm_nm, uplp.struct_parm_val 
                        FROM up_layout_param uplp LEFT JOIN up_layout_struct upls ON uplp.struct_id = upls.struct_id AND uplp.user_id = upls.user_id AND uplp.layout_id = upls.layout_id
                        WHERE upls.user_id = ? AND upls.layout_id = 1
                    </sql>
                    <parameter value="${USER_ID}"/>
                    <subtasks>
                        <append-node>
                            <param struct-id="${STRUCT_ID}">
                                <name>${STRUCT_PARM_NM}</name>
                                <value>${STRUCT_PARM_VAL}</value>
                            </param>
                        </append-node>
                    </subtasks>
                </sql-query>
                <!-- Structure User Attributes. -->
                <sql-query>
                    <sql>
                        SELECT struct_id, param_name, param_type, param_val 
                        FROM up_ss_user_atts 
                        WHERE user_id = ? AND ss_id = ? AND profile_id = 1 AND ss_type = 1
                    </sql>
                    <parameter value="${USER_ID}"/>
                    <parameter value="${sql(SELECT structure_ss_id FROM up_user_profile WHERE user_id = ${USER_ID} AND profile_id = 1)}"/>
                    <subtasks>
                        <append-node>
                            <structure-attribute struct-id="${STRUCT_ID}" type="${PARAM_TYPE}">
                                <name>${PARAM_NAME}</name>
                                <value>${PARAM_VAL}</value>
                            </structure-attribute>
                        </append-node>
                    </subtasks>
                </sql-query>
                <xslt context="${Attributes.ORIGIN}" stylesheet="export-layout.xsl">
                    <!-- user pofile(s) -->
                    <sql-query>
                        <sql>
                            SELECT upup.*, upss.ss_name AS structure, upst.ss_name AS theme
                            FROM up_user upu 
                                LEFT JOIN up_user_profile upup ON upu.user_id = upup.user_id 
                                LEFT JOIN up_ss_struct upss ON upup.structure_ss_id = upss.ss_id
                                LEFT JOIN up_ss_theme upst ON upup.theme_ss_id = upst.ss_id
                            WHERE upu.user_name = ? AND upup.layout_id = 1
                        </sql>
                        <parameter value="${req(USER_NAME)}"/>
                        <subtasks>
                            <append-node>
                                <profile name="${req(PROFILE_NAME)}" >
                                    <description>${req(DESCRIPTION)}</description>
                                    <structure name="${req(STRUCTURE)}"/>
                                    <theme name="${req(THEME)}"/>
                                </profile>
                            </append-node>
                            <!-- for each profile row, also create structure and theme elements
                                WARNING: tables UP_SS_USER_ATTS and UP_SS_USER_PARM must contain unique values in the SS_NAME column -->
                            <with-attribute key="Attributes.NODE"
                                value="${singleNode(profile[position()=last()])}">
                                <sql-query>
                                    <sql>
                                        select param_name, param_val, ss_type
                                        from UP_SS_USER_PARM
                                        where user_id=? and profile_id=? and ((ss_id=? and ss_type=1) or (ss_id=? and ss_type=2))
                                    </sql>
                                    <parameter value="${req(PROFILE_ID)}"/>
                                    <parameter value="${req(USER_ID)}"/>
                                    <parameter value="${req(STRUCTURE_SS_ID)}"/>
                                    <parameter value="${req(THEME_SS_ID)}"/>
                                    <subtasks>
                                        <choose>
                                            <!-- type=1 for structure parameters -->
                                            <when test="${jexl(SS_TYPE == 1)}">
                                                <append-node parent="${singleNode(structure)}"
                                                    node="${commentNode(Parameters for structure transform)}" />
                                                <append-node parent="${singleNode(structure)}">
                                                    <parameter>
                                                        <name>${req(PARAM_NAME)}</name>
                                                        <value>${req(PARAM_VAL)}</value>
                                                    </parameter>
                                                </append-node>
                                            </when>
                                            <!-- type=1 for theme parameters -->
                                            <when test="${jexl(SS_TYPE == 2)}">
                                            <append-node parent="${singleNode(theme)}"
                                                    node="${commentNode(Parameters for theme transform)}" />
                                                <append-node parent="${singleNode(theme)}">
                                                    <parameter>
                                                        <name>${req(PARAM_NAME)}</name>
                                                        <value>${req(PARAM_VAL)}</value>
                                                    </parameter>
                                                </append-node>
                                            </when>
                                        </choose>
                                    </subtasks>
                                </sql-query>
    
                            </with-attribute>
                        </subtasks>
                    </sql-query>
                
                    <with-attribute key="PREFERENCES" value="${crn(export-preferences.crn)}">
                        <if test="${groovy(PREFERENCES != null)}">
                            <append-node node="${PREFERENCES}"/>
                        </if>
                    </with-attribute>

                    <with-attribute key="SAFE_USER_NAME" value="${org.jasig.portal.io.SafeFileNamePhrase(${req(USER_NAME)})}">
                        <choose>
                            <when test="${crn(is-fragment-owner.crn)}">
                                <!-- This is a DLM fragment owner layout... -->
                                <write-document file="${EXPORT_DIR}/fragment-layout/${SAFE_USER_NAME}.fragment-layout"/>
                            </when>
                            <otherwise>
                                <!-- This is a normal layout... -->
                                <write-document file="${EXPORT_DIR}/layout/${SAFE_USER_NAME}.layout"/>
                            </otherwise>
                        </choose>
                    </with-attribute>
                </xslt>
            </otherwise>
        </choose>
    </with-attribute>
</with-attribute>
