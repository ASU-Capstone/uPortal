<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2000-2009, Jasig, Inc.
    See license distributed with this file and available online at
    https://www.ja-sig.org/svn/jasig-parent/tags/rel-10/license-header.txt

-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    
    <!-- ********** User Information Support Beans ********** -->
    <!--
     | Provides user name for the current portal user if the thread is handling a request
     +-->
    <bean id="currentUserProvider" class="org.jasig.portal.persondir.support.PersonManagerCurrentUserProvider">
        <property name="personManager" ref="personManager" />
        <property name="portalRequestUtils" ref="portalRequestUtils" />
    </bean>
    
    <!--
     | Provides the default username attribute to use to the rest of the DAOs
     +-->
    <bean id="usernameAttributeProvider" class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider">
        <property name="usernameAttribute" value="username" />
    </bean>
    
    
    
    <!-- ********** Overwriting attribute beans for Attribute Swapper ********** -->
    <!-- 
     | Overrides DAO acts as the root, it handles incorporating attributes from the attribute swapper utility, wraps
     | the caching DAO
     +-->
    <bean id="personAttributeDao" class="org.jasig.portal.portlets.swapper.OverwritingPersonAttributeDao">
        <property name="delegatePersonAttributeDao" ref="requestAttributeMergingDao" />
        <property name="attributeOverridesMap" ref="sessionAttributesOverridesMap" />
    </bean>
    
    <!--
     | Store attribute overrides in a session scoped map to ensure overrides don't show up for
     | other users and swapped attributes will be cleaned up on user logout.
     +-->
    <bean id="sessionAttributesOverridesMap" class="java.util.concurrent.ConcurrentHashMap" scope="globalSession">
        <aop:scoped-proxy />
    </bean>
    
    
    
    <!-- ********** Beans for Attributes from the HttpServletRequest **********-->
    <!-- 
     | Merges attributes from the request with those from other DAOs
     +-->
    <bean id="requestAttributeMergingDao" class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="merger">
            <bean class="org.jasig.services.persondir.support.merger.ReplacingAttributeAdder" />
        </property>
        <property name="personAttributeDaos">
            <list>
                <ref bean="requestAttributesDao"/>
                <ref bean="cachingMergedPersonAttributeDao"/>
            </list>
        </property>
    </bean>
            
    <!-- 
     | Servlet filter that creates an attribute for the serverName
     +-->
    <bean id="requestAttributeSourceFilter" class="org.jasig.services.persondir.support.web.RequestAttributeSourceFilter">
        <property name="additionalDescriptors" ref="requestAdditionalDescriptors" />
        <property name="serverNameAttribute" value="serverName" />
        <property name="processingPosition" value="BOTH" />
    </bean>
    
    <!-- 
     | Session-scoped descriptors object. One of these will exist for each user in their session. It will store the
     | attributes from the reques set by the requestAttributeSourceFilter
     +-->
    <bean id="requestAdditionalDescriptors" class="org.jasig.services.persondir.support.AdditionalDescriptors" scope="globalSession">
        <aop:scoped-proxy />
    </bean>
    
    <!-- 
     | The person attributes DAO that returns the attributes from the request. Uses a currentUserProvider since the
     | username may not always be provided by the request object.
     +-->
    <bean id="requestAttributesDao" class="org.jasig.services.persondir.support.AdditionalDescriptorsPersonAttributeDao">
        <property name="descriptors" ref="requestAdditionalDescriptors" />
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="currentUserProvider" ref="currentUserProvider" />
    </bean>
    
    
    
    <!-- ********** Data source attribute DAOs **********-->
    <!-- 
     | Merging DAOs that define the order that the data providing DAOs are called, results are cached by the outer
     | caching DAO
     +-->
    <bean id="cachingMergedPersonAttributeDao" class="org.jasig.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.jasig.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.merged" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <property name="merger">
                    <bean class="org.jasig.services.persondir.support.merger.ReplacingAttributeAdder" />
                </property>
                <property name="personAttributeDaos">
                    <list>
                        <ref bean="cachinguPortalJdbcAttributeSource"/>
                        <ref bean="cachinguPortalJdbcUserSource"/>
                    </list>
                </property>
            </bean>
        </property>
    </bean>
    
    <!--
     | Looks in the base UP_USER table, doesn't find attributes but will ensure a result if it the user exists in the
     | portal database and is searched for by username, results are cached by the outer caching DAO
     +-->
    <bean id="cachinguPortalJdbcUserSource" class="org.jasig.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.jasig.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.up_user" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                <constructor-arg index="0" ref="PersonDB" />
                <constructor-arg>
                    <value> 
                        SELECT USER_NAME
                        FROM UP_USER
                        WHERE {0}
                    </value>
                </constructor-arg>
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <property name="queryAttributeMapping">
                    <map>
                        <entry key="username" value="USER_NAME" />
                    </map>
                </property>
                <property name="resultAttributeMapping">
                    <map>
                        <entry key="USER_NAME">
                            <set>
                                <value>uid</value>
                                <value>username</value>
                                <value>user.login.id</value>
                            </set>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

    <!--
     | Looks in the local person-directory table. This table is only used for portal-local users such as fragment owners
     | All attributes are searchable via this configuration, results are cached by the outer caching DAO
     +-->
    <bean id="cachinguPortalJdbcAttributeSource" class="org.jasig.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.jasig.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.up_person_dir" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                <constructor-arg index="0" ref="PersonDB" />
                <constructor-arg>
                    <value> 
                        SELECT FIRST_NAME||' '||LAST_NAME AS FIRST_LAST, FIRST_NAME, LAST_NAME, EMAIL, USER_NAME 
                        FROM UP_PERSON_DIR 
                        WHERE {0}
                    </value>
                </constructor-arg>
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <!-- Allow for querying using any field in the table -->
                <property name="queryAttributeMapping">
                    <map>
                        <entry key="username"   value="USER_NAME" />
                        <entry key="givenName"  value="FIRST_NAME" />
                        <entry key="sn"         value="LAST_NAME" />
                        <entry key="mail"       value="EMAIL" />
                    </map>
                </property>
                <!-- Map the table fields to P3P attribute names -->
                <property name="resultAttributeMapping">
                    <map>
                        <entry key="FIRST_LAST" value="displayName" />
                        <entry key="FIRST_NAME">
                            <set>
                                <value>givenName</value>
                                <value>user.name.given</value>
                            </set>
						</entry>
                        <entry key="LAST_NAME">
                            <set>
                                <value>sn</value>
                                <value>user.name.family</value>
                            </set>
						</entry>
                        <entry key="EMAIL">
                            <set>
                                <value>mail</value>
                                <value>user.home-info.online.email</value>
                            </set>
						</entry>
                        <entry key="USER_NAME">
                            <set>
                                <value>uid</value>
                                <value>username</value>
                                <value>user.login.id</value>
                            </set>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="userAttributeCacheKeyGenerator" class="org.jasig.services.persondir.support.AttributeBasedCacheKeyGenerator">
        <property name="useAllAttributes" value="true" />
        <property name="ignoreEmptyAttributes" value="true" />
    </bean>
    
    <bean class="org.jasig.portal.user.UserAttributesCacheCleaner" />
</beans>
