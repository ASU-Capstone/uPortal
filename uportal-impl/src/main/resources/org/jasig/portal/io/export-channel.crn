<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<!--
 | NOTICE:  This file represents a contractual API that is leveraged by more 
 | than one caller.  Please do not refactor this file in a way that changes 
 | the number or nature of arguments expected.
 |
 | These are:
 |   - ${FNAME}=the identifier of the entity to export
 |   - Settings defined in classpath://properties/db/entities/export.properties
 |   - ${channelRegistryStore}=Injected by importExportContext.xml
 |   - ${portletDefinitionRegistry}=Injected by importExportContext.xml
 |
 +-->
<with-attribute key="Attributes.NODE" value="${newDoc(channel-definition)}">
    <echo-ln>Export Channel:  FNAME=${FNAME}</echo-ln>
    <append-node node="${attributeNode(script=classpath://org/jasig/portal/io/import-channel_v3-2.crn)}"/>
    <with-attribute key="channelDefinition" value="${groovy(channelRegistryStore.getChannelDefinition(FNAME))}">
        <choose>
            <when test="${jexl(channelDefinition == null)}">
                <echo-ln>WARNING:  Channel '${FNAME}' does not exist;  no channel file will be generated.</echo-ln>
                <log logger-name="org.jasig.portal.io.export-channel" level="warn">Channel '${FNAME}' does not exist;  no channel file will be generated.</log>
            </when>
            <otherwise>

                <!-- Establish basic structure of the document... -->
                <append-node>
                    <title>${groovy(channelDefinition.getTitle())}</title>
                    <name>${groovy(channelDefinition.getName())}</name>
                    <fname>${groovy(channelDefinition.getFName())}</fname>
                    <desc>${groovy(channelDefinition.getDescription())}</desc>
                    <type>${groovy(channelDefinition.getType().getName())}</type>
                    <class>${groovy(channelDefinition.getJavaClass())}</class>
                    <timeout>${groovy(channelDefinition.getTimeout())}</timeout>
                    <hasedit>${groovy(channelDefinition.isEditable() ? 'Y' : 'N')}</hasedit>
                    <hashelp>${groovy(channelDefinition.hasHelp() ? 'Y' : 'N')}</hashelp>
                    <hasabout>${groovy(channelDefinition.hasAbout() ? 'Y' : 'N')}</hasabout>
                    <secure>${groovy(channelDefinition.isSecure() ? 'Y' : 'N')}</secure>
                    <locale>en_US</locale>
                    <categories/>
                    <groups/>
                    <users/>
                    <parameters/>
                    <portletPreferences/>
                </append-node>

                <!-- Categories -->
                <groovy>
                    <script>
                        import org.jasig.portal.channel.IChannelDefinition;
                        import org.jasig.portal.groups.IGroupMember;
                        import org.jasig.portal.services.GroupService;
                        
                        IGroupMember gm = GroupService.getGroupMember(channelDefinition.getId().toString(), IChannelDefinition.class);
                        Iterator categories = GroupService.getCompositeGroupService().findContainingGroups(gm);
                        ScriptAttributes.RESPONSE.setAttribute('categories', categories);
                    </script>
                    <subtasks>
                        <for-each items="${categories}" attribute-name="category">
                            <append-node parent="${singleNode(categories)}">
                                <category>${groovy(category.getName())}</category>
                            </append-node>
                        </for-each>
                    </subtasks>
                </groovy>

                <!--  Groups and Users  -->
                <with-attribute key="MEMBERSHIPS" value="${crn(find-membership.crn)}">
                    <if test="${groovy(MEMBERSHIPS.size() > 0)}">
                        <for-each items="${MEMBERSHIPS}" attribute-name="CURRENT_MEMBER">
                            <choose>
                                <when test="${groovy(CURRENT_MEMBER == null)}">
                                    <echo-ln>WARNING:  The definition for channel ${FNAME} contained an orphaned record in its SUBSCRIBE permissions, which will be ignored.</echo-ln>
                                    <log logger-name="org.jasig.portal.io.export-channel" level="warn">The definition for channel ${FNAME} contained an orphaned record in its SUBSCRIBE permissions, which will be ignored.</log>
                                </when>
                                <when test="${groovy(CURRENT_MEMBER.isGroup())}">
                                    <with-attribute key="GROUP_NAME" value="${groovy(org.jasig.portal.services.EntityNameFinderService.instance().getNameFinder(CURRENT_MEMBER.getType()).getName(CURRENT_MEMBER.getKey()))}">
                                        <append-node parent="${singleNode(groups)}">
                                            <group>${GROUP_NAME}</group>
                                        </append-node>
                                    </with-attribute>
                                </when>
                                <when test="${groovy(CURRENT_MEMBER.isEntity())}">
                                    <with-attribute key="USER_NAME" value="${groovy(CURRENT_MEMBER.getKey())}">
                                        <if test="${crn(${isUserIncluded})}">
                                            <append-node parent="${singleNode(users)}">
                                                <user>${USER_NAME}</user>
                                            </append-node>
                                        </if>
                                    </with-attribute>
                                </when>
                                <otherwise>
                                    <echo-ln>WARNING:  Subscribed IGroupMember ${CURRENT_MEMBER} is not a group or an entity and will be ignored.</echo-ln>
                                    <log logger-name="org.jasig.portal.io.export-channel" level="warn">Subscribed IGroupMember ${CURRENT_MEMBER} is not a group or an entity and will be ignored.</log>
                                </otherwise>
                            </choose>
                        </for-each>
                    </if>
                </with-attribute>

                <!--  Standard Channel Parameters  -->
                <for-each items="${groovy(channelDefinition.getParameters())}" attribute-name="channelParameter">
                    <append-node parent="${singleNode(parameters)}">
                        <parameter>
                            <name>${groovy(channelParameter.getName())}</name>
                            <value>${groovy(channelParameter.getValue())}</value>
                            <description>${groovy(channelParameter.getDescription() ?: '')}</description>
                            <ovrd>${groovy(channelParameter.getOverride() ? 'Y' : 'N')}</ovrd>
                        </parameter>
                    </append-node>
                </for-each>
                <!--  Portlet preferences  -->
                <with-attribute key="PORTLET_DEF" value="${groovy(portletDefinitionRegistry.getPortletDefinition(channelDefinition.getId()))}">
                    <if test="${groovy(PORTLET_DEF != null)}">
                        <for-each items="${groovy(PORTLET_DEF.getPortletPreferences().getPortletPreferences())}" attribute-name="portletPreference">
                            <with-attribute key="PORTLET_PREF_NAME" value="${groovy(portletPreference.getName())}">
                                <append-node parent="${singleNode(portletPreferences)}">
                                    <portletPreference>
                                        <name>${PORTLET_PREF_NAME}</name>
                                        <read-only>${groovy(portletPreference.isReadOnly())}</read-only>
                                        <values/>
                                    </portletPreference>
                                </append-node>
                                <with-attribute key="Attributes.NODE" value="${singleNode(portletPreferences/portletPreference[name=$PORTLET_PREF_NAME]/values)}">
                                    <for-each items="${groovy(portletPreference.getValues())}" attribute-name="preferenceValue">
                                        <append-node>
                                            <value>${preferenceValue}</value>
                                        </append-node>
                                    </for-each>
                                </with-attribute>
                            </with-attribute>
                        </for-each>
                    </if>
                </with-attribute>

                <return value="${Attributes.NODE}"/>

            </otherwise>
        </choose>
    </with-attribute>
</with-attribute>
